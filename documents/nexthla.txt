Expression:

	<variable> <constant> 				load value into A
	+ - * / ? ! & | ^ 					get the following variable|constant and do that code.
	>									get the following variable or variable?!term and store it there.
										variables create it if it doesn't exist.

	def <variable>(<var|int>,...)		clear all local variables
										save interim registers to terms.
										mark start.

	endproc 							compile rts.

	variables/procedures are [a-z_][a-z0-9._]		
	global variables/procedures begin with $
	scope is different for the two.

	if (expr<#=0): ..... :endif 														
	while (expr<#=0): ....:endwhile
	for (expr):....:endfor

# TODO: 
#		Process hexadecimal constants.
# 		Track procedure parameter counts.
#		Address of variable (match &/Assembler.VARMARKER)
# 		Only create l-expr variables ?
#		Identify a scheme for passing routines in.
