//
//		Comments
//
proc <identifier>(<ident>,<ident>....)		Defines a procedure here. Erases all local variables, allocates
											static variables for the parameter idents. Reset structure stack.

<xterm><op><term><op><term> 				<xterm> is identifier or identifier[const|identifier]
											<term> is const or identifier
											this is an expression, ends with eol or unknown op
><xterm>									this "operation" allows assignment to and <xterm>

~											indicates a new line, as source is munged into a string
: 											seperates instructions

<cond> is an expr ending in <0 =0 #0

while <cond> : <statements> : endwhile		while loop
if <cond> : <statements> : endif			multi line condition
for <expr> : <statements> : endfor 			writes to 'index', if defined.
endproc 									return from subroutine (can be multiple)
<identifier>(<expr>,<expr>,<expr>)			function/procedure call.
<term>....									expression

variables are declared by assignment. Globals have a $prefix.

<ident>.boot() are executed in code order to start but must be declared as global

end of module non global procedures are deleted from the dictionary.

Processing
==========

Comments out, tabs out, space stripping
Remove all quoted strings.
Joined by ~ and :
Split into procedures (at proc <identifier>) and process seperately. No code before first proc, or between !
- scan for globals (including old ones) and locals 
- process each instruction once at a time.

identifiers [a-z_$][a-z0-9_:.]
