              	; --------------------------------------
              	; zasm: assemble "library.asm"
              	; date: 2018-12-29 21:36:50
              	; --------------------------------------


              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		library.asm
              	;		Purpose:	Wrapper for building libraries.
              	;		Date : 		28th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              		include "common/kernel.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		27th December 2018
              	;		Purpose :	Flat Forth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
0020:         	FirstCodePage = $20 								; $20 = code page.
5FFE:         	StackTop = $5FFE 									; Z80 call stack top.
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1808    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: 4F87    			dw 		SystemInformation 
8006: FFFF    			org 	$8008 								; $8008 address of first definition.
8008: 2B83    			dw 	 	linkHeader
              	
800A: DD01    	Boot:	db 		$DD,$01
800C: 31FE5F  			ld 		sp,StackTop							; reset Z80 Stack
800F: F3      			di											; disable interrupts
8010: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
8014: 2E00    			ld 		l,0	 								; graphic mode 0
8016: CD9E84  			call 	GFXMode
8019: 3A5D87  			ld 		a,(StartAddressPage)				; Switch to start page
801C: ED9256  			db 		$ED,$92,$56
801F: 3C      			inc 	a
8020: ED9257  			db 		$ED,$92,$57
8023: 3D      			dec 	a
8024: 08      			ex 		af,af'								; Set A' to current page.
8025: 2A5B87  			ld 		hl,(StartAddress) 					; start running address
8028: E9      			jp 		(hl) 								; and start
              	
8029:         	__KernelHalt: 										; if boot address not set.
8029: 18FE    			jr 		__KernelHalt
              	
802B:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
802B: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
802F: 00000000	
8033: 0C1E1E0C	
8037: 0C000C00	
803B: 36360000	
803F: 00000000	
8043: 36367F36	
8047: 7F363600	
804B: 183E603C	
804F: 067C1800	
8053: 0063660C	
8057: 18336300	
805B: 1C361C3B	
805F: 6E663B00	
8063: 30306000	
8067: 00000000	
806B: 0C183030	
806F: 30180C00	
8073: 30180C0C	
8077: 0C183000	
807B: 00331E7F	
807F: 1E330000	
8083: 0018187E	
8087: 18180000	
808B: 00000000	
808F: 00181830	
8093: 0000007E	
8097: 00000000	
809B: 00000000	
809F: 00181800	
80A3: 03060C18	
80A7: 30604000	
80AB: 3E63676F	
80AF: 7B733E00	
80B3: 18381818	
80B7: 18187E00	
80BB: 3C66061C	
80BF: 30667E00	
80C3: 3C66061C	
80C7: 06663C00	
80CB: 0E1E3666	
80CF: 7F060F00	
80D3: 7E607C06	
80D7: 06663C00	
80DB: 1C30607C	
80DF: 66663C00	
80E3: 7E66060C	
80E7: 18181800	
80EB: 3C66663C	
80EF: 66663C00	
80F3: 3C66663E	
80F7: 060C3800	
80FB: 00181800	
80FF: 00181800	
8103: 00181800	
8107: 00181830	
810B: 0C183060	
810F: 30180C00	
8113: 00007E00	
8117: 007E0000	
811B: 30180C06	
811F: 0C183000	
8123: 3C66060C	
8127: 18001800	
812B: 3E636F6F	
812F: 6F603C00	
8133: 183C6666	
8137: 7E666600	
813B: 7E33333E	
813F: 33337E00	
8143: 1E336060	
8147: 60331E00	
814B: 7C363333	
814F: 33367C00	
8153: 7F31343C	
8157: 34317F00	
815B: 7F31343C	
815F: 34307800	
8163: 1E336060	
8167: 67331F00	
816B: 6666667E	
816F: 66666600	
8173: 3C181818	
8177: 18183C00	
817B: 0F060606	
817F: 66663C00	
8183: 7333363C	
8187: 36337300	
818B: 78303030	
818F: 31337F00	
8193: 63777F7F	
8197: 6B636300	
819B: 63737B6F	
819F: 67636300	
81A3: 1C366363	
81A7: 63361C00	
81AB: 7E33333E	
81AF: 30307800	
81B3: 3C666666	
81B7: 6E3C0E00	
81BB: 7E33333E	
81BF: 36337300	
81C3: 3C667038	
81C7: 0E663C00	
81CB: 7E5A1818	
81CF: 18183C00	
81D3: 66666666	
81D7: 66667E00	
81DB: 66666666	
81DF: 663C1800	
81E3: 6363636B	
81E7: 7F776300	
81EB: 6363361C	
81EF: 1C366300	
81F3: 6666663C	
81F7: 18183C00	
81FB: 7F63460C	
81FF: 19337F00	
8203: 3C303030	
8207: 30303C00	
820B: 6030180C	
820F: 06030100	
8213: 3C0C0C0C	
8217: 0C0C3C00	
821B: 081C3663	
821F: 00000000	
8223: 00000000	
8227: 0000007F	
822B: 18180C00	
822F: 00000000	
8233: 00003C06	
8237: 3E663B00	
823B: 7030303E	
823F: 33336E00	
8243: 00003C66	
8247: 60663C00	
824B: 0E06063E	
824F: 66663B00	
8253: 00003C66	
8257: 7E603C00	
825B: 1C363078	
825F: 30307800	
8263: 00003B66	
8267: 663E067C	
826B: 7030363B	
826F: 33337300	
8273: 18003818	
8277: 18183C00	
827B: 06000606	
827F: 0666663C	
8283: 70303336	
8287: 3C367300	
828B: 38181818	
828F: 18183C00	
8293: 0000667F	
8297: 7F6B6300	
829B: 00007C66	
829F: 66666600	
82A3: 00003C66	
82A7: 66663C00	
82AB: 00006E33	
82AF: 333E3078	
82B3: 00003B66	
82B7: 663E060F	
82BB: 00006E3B	
82BF: 33307800	
82C3: 00003E60	
82C7: 3C067C00	
82CB: 08183E18	
82CF: 181A0C00	
82D3: 00006666	
82D7: 66663B00	
82DB: 00006666	
82DF: 663C1800	
82E3: 0000636B	
82E7: 7F7F3600	
82EB: 00006336	
82EF: 1C366300	
82F3: 00006666	
82F7: 663E067C	
82FB: 00007E4C	
82FF: 18327E00	
8303: 0E181870	
8307: 18180E00	
830B: 0C0C0C00	
830F: 0C0C0C00	
8313: 7018180E	
8317: 18187000	
831B: 3B6E0000	
831F: 00000000	
8323: 00...   	
              	
              		include "temp/__source.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		28th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	;	Actually calculates HL / BC
              	
832B:         	linkHeader:
832B:         	link0:
832B: 1900    	    dw link1-link0
832D: 7379732E	 	db "sys.divide",0
8331: 64697669	
8335: 646500  	
8338: C5      		push 	bc
8339: D5      		push 	de
833A: EB      		ex 		de,hl
833B: 69      		ld 		l,c
833C: 60      		ld 		h,b
833D: CD5D83  		call 	DIVDivideMod16
8340: EB      		ex 		de,hl
8341: D1      		pop 	de
8342: C1      		pop 	bc
8343: C9      		ret
              	
              	;	Actually calculates HL % BC
              	
8344:         	link1:
8344: 4400    	    dw link2-link1
8346: 7379732E	 	db "sys.modulus",0
834A: 6D6F6475	
834E: 6C757300	
8352: C5      		push 	bc
8353: D5      		push 	de
8354: EB      		ex 		de,hl
8355: 69      		ld 		l,c
8356: 60      		ld 		h,b
8357: CD5D83  		call 	DIVDivideMod16
835A: D1      		pop 	de
835B: C1      		pop 	bc
835C: C9      		ret
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
835D:         	DIVDivideMod16:
              	
835D: C5      		push 	bc
835E: 42      		ld 		b,d 				; DE
835F: 4B      		ld 		c,e
8360: EB      		ex 		de,hl
8361: 210000  		ld 		hl,0
8364: 78      		ld 		a,b
8365: 0608    		ld 		b,8
8367:         	Div16_Loop1:
8367: 17      		rla
8368: ED6A    		adc 	hl,hl
836A: ED52    		sbc 	hl,de
836C: 3001    		jr 		nc,Div16_NoAdd1
836E: 19      		add 	hl,de
836F:         	Div16_NoAdd1:
836F: 10F6    		djnz 	Div16_Loop1
8371: 17      		rla
8372: 2F      		cpl
8373: 47      		ld 		b,a
8374: 79      		ld 		a,c
8375: 48      		ld 		c,b
8376: 0608    		ld 		b,8
8378:         	Div16_Loop2:
8378: 17      		rla
8379: ED6A    		adc 	hl,hl
837B: ED52    		sbc 	hl,de
837D: 3001    		jr 		nc,Div16_NoAdd2
837F: 19      		add 	hl,de
8380:         	Div16_NoAdd2:
8380: 10F6    		djnz 	Div16_Loop2
8382: 17      		rla
8383: 2F      		cpl
8384: 51      		ld 		d,c
8385: 5F      		ld 		e,a
8386: C1      		pop 	bc
8387: C9      		ret
              	
              	
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		28th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; 	calculate HL = HL * BC
              	
8388:         	link2:
8388: 3100    	    dw link3-link2
838A: 7379732E	 	db "sys.multiply",0
838E: 6D756C74	
8392: 69706C79	
8396: 00      	
8397: D5      			push 	de
8398: 50      			ld 		d,b
8399: 59      			ld 		e,c
839A: CD9F83  			call 	MULTMultiply16
839D: D1      			pop 	de
839E: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
839F:         	MULTMultiply16:
839F: C5      			push 	bc
83A0: D5      			push 	de
83A1: 44      			ld 		b,h 							; get multipliers in DE/BC
83A2: 4D      			ld 		c,l
83A3: 210000  			ld 		hl,0 							; zero total
83A6:         	__Core__Mult_Loop:
83A6: CB41    			bit 	0,c 							; lsb of shifter is non-zero
83A8: 2801    			jr 		z,__Core__Mult_Shift
83AA: 19      			add 	hl,de 							; add adder to total
83AB:         	__Core__Mult_Shift:
83AB: CB38    			srl 	b 								; shift BC right.
83AD: CB19    			rr 		c
83AF: EB      			ex 		de,hl 							; shift DE left
83B0: 29      			add 	hl,hl
83B1: EB      			ex 		de,hl
83B2: 78      			ld 		a,b 							; loop back if BC is nonzero
83B3: B1      			or 		c
83B4: 20F0    			jr 		nz,__Core__Mult_Loop
83B6: D1      			pop 	de
83B7: C1      			pop 	bc
83B8: C9      			ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		bitwise.asm
              	;		Purpose:	16 bit bitwise operations
              	;		Date : 		28th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
83B9:         	link3:
83B9: 1100    	    dw link4-link3
83BB: 7379732E	 	db "sys.and",0
83BF: 616E6400	
83C3: 7C      			ld 		a,h
83C4: A0      			and 	b
83C5: 67      			ld 		h,a
83C6: 7D      			ld 		a,l
83C7: A1      			and 	c
83C8: 6F      			ld 		l,a
83C9: C9      			ret
              	
83CA:         	link4:
83CA: 1100    	    dw link5-link4
83CC: 7379732E	 	db "sys.xor",0
83D0: 786F7200	
83D4: 7C      			ld 		a,h
83D5: A8      			xor 	b
83D6: 67      			ld 		h,a
83D7: 7D      			ld 		a,l
83D8: A9      			xor 	c
83D9: 6F      			ld 		l,a
83DA: C9      			ret
              	
83DB:         	link5:
83DB: 8800    	    dw link6-link5
83DD: 7379732E	 	db "sys.or",0
83E1: 6F7200  	
83E4: 7C      			ld 		a,h
83E5: B0      			or 		b
83E6: 67      			ld 		h,a
83E7: 7D      			ld 		a,l
83E8: B1      			or 		c
83E9: 6F      			ld 		l,a
83EA: C9      			ret
              	
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled.
              	;		Date : 		28th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k
              	;
              	; *********************************************************************************
              	
83EB:         	GFXInitialise48k:
83EB: F5      			push 	af 									; save registers
83EC: C5      			push 	bc
              	
83ED: 013B12  			ld 		bc,$123B 							; Layer 2 access port
83F0: 3E00    			ld 		a,0 								; disable Layer 2
83F2: ED79    			out 	(c),a
83F4: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
83F8: 210040  			ld 		hl,$4000 							; clear pixel memory
83FB: 3600    	__cs1:	ld 		(hl),0
83FD: 23      			inc 	hl
83FE: 7C      			ld 		a,h
83FF: FE58    			cp 		$58
8401: 20F8    			jr 		nz,__cs1
8403: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
8405: 23      			inc 	hl
8406: 7C      			ld 		a,h
8407: FE5B    			cp 		$5B
8409: 20F8    			jr 		nz,__cs2
840B: AF      			xor 	a 									; border off
840C: D3FE    			out 	($FE),a
840E: C1      			pop 	bc
840F: F1      			pop 	af
8410: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
8413: 111784  			ld 		de,GFXPrintCharacter48k
8416: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8417:         	GFXPrintCharacter48k:
8417: F5      			push 	af 									; save registers
8418: C5      			push 	bc
8419: D5      			push 	de
841A: E5      			push 	hl
              	
841B: 43      			ld 		b,e 								; character in B
841C: 7C      			ld 		a,h 								; check range.
841D: FE03    			cp 		3
841F: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
8421: E5      			push 	hl 									; save position.
8422: 7C      			ld 		a,h
8423: C658    			add 	$58
8425: 67      			ld 		h,a
              	
8426: 7A      			ld 		a,d 								; get current colour
8427: E607    			and 	7  									; mask 0..2
8429: F640    			or 		$40  								; make bright
842B: 77      			ld 		(hl),a 								; store it.
842C: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
842D: D5      			push 	de
842E: EB      			ex 		de,hl
842F: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
8430: 7A      			ld 		a,d
8431: E603    			and 	3
8433: 87      			add 	a,a
8434: 87      			add 	a,a
8435: 87      			add 	a,a
8436: F640    			or 		$40
8438: 67      			ld 		h,a
8439: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
843A: E5      			push 	hl
843B: 78      			ld 		a,b 								; get character
843C: E67F    			and 	$7F 								; bits 0-6 only.
843E: D620    			sub 	32
8440: 6F      			ld 		l,a 								; put in HL
8441: 2600    			ld 		h,0
8443: 29      			add 	hl,hl 								; x 8
8444: 29      			add 	hl,hl
8445: 29      			add 	hl,hl
8446: ED5B6B87			ld 		de,(SIFontBase) 					; add the font base.
844A: 19      			add 	hl,de
844B: EB      			ex 		de,hl 								; put in DE (font address)
844C: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
844D: 78      			ld 		a,b
844E: 0608    			ld 		b,8 								; copy 8 characters
8450: 0E00    			ld 		c,0 								; XOR value 0
8452: CB7F    			bit 	7,a 								; is the character reversed
8454: 2801    			jr 		z,__ZXWCCopy
8456: 0D      			dec 	c 									; C is the XOR mask now $FF
8457:         	__ZXWCCopy:
8457: 1A      			ld 		a,(de)								; get font data
8458: A9      			xor 	c 									; xor with reverse
8459: 77      			ld 		(hl),a 								; write back
845A: 24      			inc 	h 									; bump pointers
845B: 13      			inc 	de
845C: 10F9    			djnz 	__ZXWCCopy 							; do B times.
845E:         	__ZXWCExit:
845E: E1      			pop 	hl 									; restore and exit
845F: D1      			pop 	de
8460: C1      			pop 	bc
8461: F1      			pop 	af
8462: C9      			ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		28th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
8463:         	link6:
8463: 1400    	    dw link7-link6
8465: 73637265	 	db "screen.setmode",1
8469: 656E2E73	
846D: 65746D6F	
8471: 646501  	
8474: C39E84  			jp 		GFXMode
              	
8477:         	link7:
8477: 1200    	    dw link8-link7
8479: 73637265	 	db "screen.write",2
847D: 656E2E77	
8481: 72697465	
8485: 02      	
8486: C3CF84  			jp 		GFXWriteCharacter
              	
8489:         	link8:
8489: E701    	    dw link9-link8
848B: 73637265	 	db "screen.writehex",2
848F: 656E2E77	
8493: 72697465	
8497: 68657802	
849B: C3E284  			jp 		GFXWriteHexWord
              	
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
849E:         	GFXMode:
849E: C5      			push 	bc
849F: D5      			push 	de
84A0: E5      			push 	hl
84A1: 2D      			dec 	l 									; L = 1 mode layer2
84A2: 2808    			jr 		z,__GFXLayer2
84A4: 2D      			dec 	l
84A5: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
84A7: CDEB83  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
84AA: 1808    			jr 		__GFXConfigure
              	
84AC:         	__GFXLayer2:
84AC: CD1485  			call 	GFXInitialiseLayer2
84AF: 1803    			jr 		__GFXConfigure
              	
84B1:         	__GFXLowRes:
84B1: CDCB85  			call 	GFXInitialiseLowRes
              	
84B4:         	__GFXConfigure:
84B4: 7D      			ld 		a,l 								; save screen size
84B5: 325F87  			ld 		(SIScreenWidth),a
84B8: 7C      			ld 		a,h
84B9: 326387  			ld 		(SIScreenHeight),a
84BC: EB      			ex 		de,hl 								; save driver
84BD: 226F87  			ld 		(SIScreenDriver),hl
              	
84C0: 6A      			ld 		l,d 								; put sizes in HL DE
84C1: 2600    			ld 		h,0
84C3: 1600    			ld 		d,0
84C5: CD9F83  			call 	MULTMultiply16 						; multiply to get size and store.
84C8: 226787  			ld 		(SIScreenSize),hl
              	
84CB: E1      			pop 	hl
84CC: D1      			pop 	de
84CD: C1      			pop 	bc
84CE: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
84CF:         	GFXWriteCharacter:
84CF: F5      			push 	af
84D0: C5      			push 	bc
84D1: D5      			push 	de
84D2: E5      			push 	hl
84D3: 01DD84  			ld 		bc,__GFXWCExit
84D6: C5      			push 	bc
84D7: ED4B6F87			ld 		bc,(SIScreenDriver)
84DB: C5      			push 	bc
84DC: C9      			ret
84DD:         	__GFXWCExit:
84DD: E1      			pop 	hl
84DE: D1      			pop 	de
84DF: C1      			pop 	bc
84E0: F1      			pop 	af
84E1: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
84E2:         	GFXWriteHexWord:
84E2: 3E05    			ld 		a,5
84E4:         	GFXWriteHexWordA:
84E4: C5      			push 	bc
84E5: D5      			push 	de
84E6: E5      			push 	hl
84E7: 4F      			ld 		c,a
84E8: 7A      			ld 		a,d
84E9: D5      			push 	de
84EA: CDF684  			call 	__GFXWHByte
84ED: D1      			pop 	de
84EE: 7B      			ld 		a,e
84EF: CDF684  			call	__GFXWHByte
84F2: E1      			pop 	hl
84F3: D1      			pop 	de
84F4: C1      			pop 	bc
84F5: C9      			ret
              	
84F6:         	__GFXWHByte:
84F6: F5      			push 	af
84F7: CB0F    			rrc 	a
84F9: CB0F    			rrc		a
84FB: CB0F    			rrc 	a
84FD: CB0F    			rrc 	a
84FF: CD0385  			call 	__GFXWHNibble
8502: F1      			pop 	af
8503:         	__GFXWHNibble:
8503: 51      			ld 		d,c
8504: E60F    			and 	15
8506: FE0A    			cp 		10
8508: 3802    			jr 		c,__GFXWHDigit
850A: C607    			add		a,7
850C:         	__GFXWHDigit:
850C: C630    			add 	a,48
850E: 5F      			ld 		e,a
850F: CDCF84  			call 	GFXWriteCharacter
8512: 23      			inc 	hl
8513: C9      			ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		28th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
8514:         	GFXInitialiseLayer2:
8514: F5      			push 	af
8515: C5      			push 	bc
8516: D5      			push 	de
8517: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
851B: 1E02    			ld 		e,2 								; 3 banks to erase
851D:         	L2PClear:
851D: 7B      			ld 		a,e 								; put bank number in bits 6/7
851E: CB0F    			rrc 	a
8520: CB0F    			rrc 	a
8522: F603    			or 		2+1 								; shadow on, visible, enable write paging
8524: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8527: ED79    			out 	(c),a
8529: 210040  			ld 		hl,$4000 							; erase the bank to $00
852C:         	L2PClearBank: 										; assume default palette :)
852C: 2B      			dec 	hl
852D: 3600    			ld 		(hl),$00
852F: 7C      			ld 		a,h
8530: B5      			or 		l
8531: 20F9    			jr		nz,L2PClearBank
8533: 1D      			dec 	e
8534: F21D85  			jp 		p,L2PClear
              	
8537: AF      			xor 	a
8538: D3FE    			out 	($FE),a
              	
853A: D1      			pop 	de
853B: C1      			pop 	bc
853C: F1      			pop 	af
853D: 212018  			ld 		hl,$1820 							; still 32 x 24
8540: 114485  			ld 		de,GFXPrintCharacterLayer2
8543: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
8544:         	GFXPrintCharacterLayer2:
8544: F5      			push 	af
8545: C5      			push 	bc
8546: D5      			push 	de
8547: E5      			push 	hl
8548: DDE5    			push 	ix
              	
854A: 43      			ld 		b,e 								; save A temporarily
854B: 78      			ld 		a,b
854C: E67F    			and 	$7F
854E: FE20    			cp 		32
8550: 3872    			jr 		c,__L2Exit 							; check char in range
8552: 7C      			ld 		a,h
8553: FE03    			cp 		3
8555: 306D    			jr 		nc,__L2Exit 						; check position in range
8557: 78      			ld 		a,b
              	
8558: F5      			push 	af
8559: AF      			xor 	a 									; convert colour in C to palette index
855A: CB42    			bit 	0,d 								; (assumes standard palette)
855C: 2802    			jr 		z,__L2Not1
855E: F603    			or 		$03
8560:         	__L2Not1:
8560: CB52    			bit 	2,d
8562: 2802    			jr 		z,__L2Not2
8564: F61C    			or 		$1C
8566:         	__L2Not2:
8566: CB4A    			bit 	1,d
8568: 2802    			jr 		z,__L2Not3
856A: F6C0    			or 		$C0
856C:         	__L2Not3:
856C: 4F      			ld 		c,a 								; C is foreground
856D: 0600    			ld 		b,0									; B is xor flipper, initially zero
856F: F1      			pop 	af 									; restore char
              	
8570: E5      			push 	hl
8571: CB7F    			bit 	7,a 								; adjust background bit on bit 7
8573: 2802    			jr 		z,__L2NotCursor
8575: 06FF    			ld 		b,$FF 								; light grey is cursor
8577:         	__L2NotCursor:
8577: E67F    			and 	$7F 								; offset from space
8579: D620    			sub 	$20
857B: 6F      			ld 		l,a 								; put into HL
857C: 2600    			ld 		h,0
857E: 29      			add 	hl,hl 								; x 8
857F: 29      			add 	hl,hl
8580: 29      			add 	hl,hl
              	
8581: E5      			push 	hl 									; transfer to IX
8582: DDE1    			pop 	ix
8584: E1      			pop 	hl
              	
8585: C5      			push 	bc 									; add the font base to it.
8586: ED4B6B87			ld 		bc,(SIFontBase)
858A: DD09    			add 	ix,bc
858C: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
858D: C5      			push 	bc
858E: 7C      			ld  	a,h 								; this is the page number.
858F: CB0F    			rrc 	a
8591: CB0F    			rrc 	a
8593: E6C0    			and 	$C0 								; in bits 6 & 7
8595: F603    			or 		$03 								; shadow on, visible, enable write pagin.
8597: 013B12  			ld 		bc,$123B 							; out to layer 2 port
859A: ED79    			out 	(c),a
859C: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
859D: EB      			ex 		de,hl
859E: 6B      			ld 		l,e
859F: 2600    			ld 		h,0
85A1: 29      			add 	hl,hl
85A2: 29      			add 	hl,hl
85A3: 29      			add 	hl,hl
85A4: CB24    			sla 	h
85A6: CB24    			sla 	h
85A8: CB24    			sla 	h
              	
85AA: 1E08    			ld 		e,8 								; do 8 rows
85AC:         	__L2Outer:
85AC: E5      			push 	hl 									; save start
85AD: 1608    			ld 		d,8 								; do 8 columns
85AF: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
85B2: A8      			xor 	b 									; maybe flip it ?
85B3: DD23    			inc 	ix
85B5:         	__L2Loop:
85B5: 3600    			ld 		(hl),0 								; background
85B7: 87      			add 	a,a 								; shift pattern left
85B8: 3001    			jr 		nc,__L2NotSet
85BA: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
85BB:         	__L2NotSet:
85BB: 23      			inc 	hl
85BC: 15      			dec 	d 									; do a row
85BD: 20F6    			jr 		nz,	__L2Loop
85BF: E1      			pop 	hl 									; restore, go 256 bytes down.
85C0: 24      			inc 	h
85C1: 1D      			dec 	e 									; do 8 rows
85C2: 20E8    			jr 		nz,__L2Outer
85C4:         	__L2Exit:
85C4: DDE1    			pop 	ix
85C6: E1      			pop 	hl
85C7: D1      			pop 	de
85C8: C1      			pop 	bc
85C9: F1      			pop 	af
85CA: C9      			ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		28th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
85CB:         	GFXInitialiseLowRes:
85CB: F5      			push 	af
85CC: C5      			push 	bc
85CD: D5      			push 	de
              	
85CE: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
85D2: AF      			xor 	a 									; layer 2 off.
85D3: 013B12  			ld 		bc,$123B 							; out to layer 2 port
85D6: ED79    			out 	(c),a
              	
85D8: 210040  			ld 		hl,$4000 							; erase the bank to $00
85DB: 110060  			ld 		de,$6000
85DE:         	LowClearScreen: 									; assume default palette :)
85DE: AF      			xor 	a
85DF: 77      			ld 		(hl),a
85E0: 12      			ld 		(de),a
85E1: 23      			inc 	hl
85E2: 13      			inc 	de
85E3: 7C      			ld 		a,h
85E4: FE58    			cp 		$58
85E6: 20F6    			jr		nz,LowClearScreen
85E8: AF      			xor 	a
85E9: D3FE    			out 	($FE),a
85EB: D1      			pop 	de
85EC: C1      			pop 	bc
85ED: F1      			pop 	af
85EE: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
85F1: 11F585  			ld 		de,GFXPrintCharacterLowRes
85F4: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
85F5:         	GFXPrintCharacterLowRes:
85F5: F5      			push 	af
85F6: C5      			push 	bc
85F7: D5      			push 	de
85F8: E5      			push 	hl
85F9: DDE5    			push 	ix
              	
85FB: 43      			ld 		b,e 								; save character in B
85FC: 7B      			ld 		a,e
85FD: E67F    			and 	$7F
85FF: FE20    			cp 		32
8601: 3866    			jr 		c,__LPExit
              	
8603: 29      			add 	hl,hl
8604: 29      			add 	hl,hl
8605: 7C      			ld	 	a,h 								; check in range 192*4 = 768
8606: FE03    			cp 		3
8608: 305F    			jr 		nc,__LPExit
              	
860A: 7A      			ld 		a,d 								; only lower 3 bits of colour
860B: E607    			and 	7
860D: 4F      			ld 		c,a 								; C is foreground
              	
860E: E5      			push 	hl
860F: 78      			ld 		a,b 								; get char back
8610: 0600    			ld 		b,0 								; B = no flip colour.
8612: CB7F    			bit 	7,a
8614: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
8616: 05      			dec 	b
8617:         	__LowNotReverse:
8617: E67F    			and 	$7F 								; offset from space
8619: D620    			sub 	$20
861B: 6F      			ld 		l,a 								; put into HL
861C: 2600    			ld 		h,0
861E: 29      			add 	hl,hl 								; x 8
861F: 29      			add 	hl,hl
8620: 29      			add 	hl,hl
              	
8621: E5      			push 	hl 									; transfer to IX
8622: DDE1    			pop 	ix
              	
8624: C5      			push 	bc 									; add the font base to it.
8625: ED4B6B87			ld 		bc,(SIFontBase)
8629: DD09    			add 	ix,bc
862B: C1      			pop 	bc
862C: E1      			pop 	hl
862D: EB      			ex 		de,hl
862E: 7B      			ld 		a,e 								; put DE => HL
862F: E6C0    			and 	192 								; these are part of Y
8631: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
8632: 62      			ld 		h,d
8633: 29      			add 	hl,hl
8634: 29      			add 	hl,hl
8635: 29      			add 	hl,hl
8636: 29      			add 	hl,hl
8637: CBF4    			set 	6,h 								; put into $4000 range
              	
8639: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
863B: A3      			and 	e 									; and with E, gives X position
863C: 87      			add 	a,a 								; now multiplied by 8.
863D: 5F      			ld 		e,a 								; DE is x offset.
863E: 1600    			ld 		d,0
              	
8640: 19      			add 	hl,de
8641: 7C      			ld 		a,h
8642: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
8644: 3804    			jr 		c,__LowNotLower2
8646: 110008  			ld 		de,$0800
8649: 19      			add 	hl,de
864A:         	__LowNotLower2:
864A: 1E08    			ld 		e,8 								; do 8 rows
864C:         	__LowOuter:
864C: E5      			push 	hl 									; save start
864D: 1608    			ld 		d,8 								; do 8 columns
864F: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8652: A8      			xor 	b
8653: DD23    			inc 	ix
8655:         	__LowLoop:
8655: 3600    			ld 		(hl),0 								; background
8657: 87      			add 	a,a 								; shift pattern left
8658: 3001    			jr 		nc,__LowNotSet
865A: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
865B:         	__LowNotSet:
865B: 2C      			inc 	l
865C: 15      			dec 	d 									; do a row
865D: 20F6    			jr 		nz,	__LowLoop
865F: E1      			pop 	hl 									; restore, go 256 bytes down.
8660: D5      			push 	de
8661: 118000  			ld 		de,128
8664: 19      			add 	hl,de
8665: D1      			pop 	de
8666: 1D      			dec 	e 									; do 8 rows
8667: 20E3    			jr 		nz,__LowOuter
8669:         	__LPExit:
8669: DDE1    			pop 	ix
866B: E1      			pop 	hl
866C: D1      			pop 	de
866D: C1      			pop 	bc
866E: F1      			pop 	af
866F: C9      			ret
              	
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		27th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
8670:         	link9:
8670: DD00    	    dw link10-link9
8672: 696E6B65	 	db "inkey",1
8676: 7901    	
8678: CD8086  			call 	IOScanKeyboard 						; read keyboard
867B: 77      			ld 		(hl),a 								; copy into variable
867C: 23      			inc 	hl
867D: 3600    			ld 		(hl),$00	 						; zero upper byte.
867F: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              	
8680:         	IOScanKeyboard:
8680: C5      			push 	bc
8681: D5      			push 	de
8682: E5      			push 	hl
              	
8683: 21D586  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8686: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
8688: 06FE    			ld 		b,$FE
868A: ED78    			in 		a,(c)
868C: CB47    			bit 	0,a
868E: 2005    			jr 		nz,__kr1
8690: 21FD86  			ld 		hl,__kr_shift_table
8693: 180B    			jr 		__kr2
8695:         	__kr1:
8695: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
8697: ED78    			in 		a,(c)
8699: CB4F    			bit 	1,a
869B: 2003    			jr 		nz,__kr2
869D: 21FD86  			ld 		hl,__kr_symbol_shift_table
86A0:         	__kr2:
              	
86A0: 1EFE    			ld 		e,$FE 								; scan pattern.
86A2: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
86A3: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
86A5: FEFE    			cp 		$FE
86A7: 2808    			jr 		z,___kr4
86A9: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
86AB: FE7F    			cp 		$7F
86AD: 2802    			jr 		z,___kr4
86AF: 161F    			ld 		d,$01F 								; check all bits.
86B1:         	___kr4:
86B1: 43      			ld 		b,e 								; scan the keyboard
86B2: 0EFE    			ld 		c,$FE
86B4: ED78    			in 		a,(c)
86B6: 2F      			cpl 										; make that active high.
86B7: A2      			and 	d  									; and with check value.
86B8: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
86BA: 23      			inc 	hl 									; next set of keyboard characters
86BB: 23      			inc 	hl
86BC: 23      			inc 	hl
86BD: 23      			inc 	hl
86BE: 23      			inc 	hl
              	
86BF: 7B      			ld 		a,e 								; get pattern
86C0: 87      			add 	a,a 								; shift left
86C1: F601    			or 		1 									; set bit 1.
86C3: 5F      			ld 		e,a
              	
86C4: FEFF    			cp 		$FF 								; finished when all 1's.
86C6: 20DA    			jr 		nz,__kr3
86C8: AF      			xor 	a
86C9: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
86CB:         	__kr_keypressed:
86CB: 23      			inc 	hl  								; shift right until carry set
86CC: 1F      			rra
86CD: 30FC    			jr 		nc,__kr_keypressed
86CF: 2B      			dec 	hl 									; undo the last inc hl
86D0: 7E      			ld 		a,(hl) 								; get the character number.
86D1:         	__kr_exit:
86D1: E1      			pop 	hl
86D2: D1      			pop 	de
86D3: C1      			pop 	bc
86D4: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	3:Abort (Shift+Q) 8:Backspace 13:Return
              	;	27:Break 32-127: Std ASCII all L/C
              	;
86D5:         	__kr_no_shift_table:
86D5: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
86D9: 76617364	
86DD: 6667    	
86DF: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
86E3: 74313233	
86E7: 3435    	
86E9: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
86ED: 36706F69	
86F1: 7579    	
86F3: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
86F7: 6820006D	
86FB: 6E62    	
              	
86FD:         	__kr_shift_table:
86FD:         	__kr_symbol_shift_table:
86FD: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8701: 2F7E7C5C	
8705: 7B7D    	
8707: 0300003C			db 		 3,  0,  0  ,'<','>',			'!','@','#','$','%'
870B: 3E214023	
870F: 2425    	
8711: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
8715: 26223B00	
8719: 5D5B    	
871B: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
871F: 5E20002E	
8723: 2C2A    	
              	
8725: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
8729: 2F7E7C5C	
872D: 7B7D    	
872F: 0300003C			db 		3,  0,  0  ,'<','>',			16,17,18,19,20
8733: 3E101112	
8737: 1314    	
8739: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
873D: 15223B00	
8741: 5D5B    	
8743: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8747: 5E20002E	
874B: 2C2A    	
874D:         	link10:
874D: 0000    	    dw 0
              		include "common/data.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		27th December 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;								System Information
              	;
              	; ***************************************************************************************
              	
874F:         	SystemInformation:
              	
874F:         	Here:												; +0 	Here 
874F: 7387    			dw 		FreeMemory
8751:         	HerePage: 											; +2	Here.Page
8751: 2000    			db 		FirstCodePage,0
8753:         	NextFreePage: 										; +4 	Next available code page (2 8k pages/page)
8753: 22000000			db 		FirstCodePage+2,0,0,0
8757:         	DisplayInfo: 										; +8 	Display information
8757: 5F870000			dw 		DisplayInformation,0		
875B:         	StartAddress: 										; +12 	Start Address
875B: 2980    			dw 		__KernelHalt
875D:         	StartAddressPage: 									; +14 	Start Page
875D: 2000    			db 		FirstCodePage,0
              	
              	; ***************************************************************************************
              	;
              	;							 Display system information
              	;
              	; ***************************************************************************************
              	
875F:         	DisplayInformation:
              	
875F:         	SIScreenWidth: 										; +0 	screen width
875F: 00000000			db 		0,0,0,0
8763:         	SIScreenHeight:										; +4 	screen height
8763: 00000000			db 		0,0,0,0
8767:         	SIScreenSize:										; +8 	screen size
8767: 00000000			db 		0,0,0,0
876B:         	SIFontBase:											; +12 	font in use
876B: 2B800000			dw 		AlternateFont,0
876F:         	SIScreenDriver:										; +16 	currently selected screen driver
876F: 00000000			dw 		0,0
              	
8773:         	FreeMemory:		


; +++ segments +++

#CODE          = $8000 = 32768,  size = $0773 =  1907

; +++ global symbols +++

AlternateFont       = $802B = 32811          kernel.asm:40
Boot                = $800A = 32778          kernel.asm:22
DIVDivideMod16      = $835D = 33629          __source.asm:50
DisplayInfo         = $8757 = 34647          data.asm:26 (unused)
DisplayInformation  = $875F = 34655          data.asm:39
Div16_Loop1         = $8367 = 33639          __source.asm:59
Div16_Loop2         = $8378 = 33656          __source.asm:73
Div16_NoAdd1        = $836F = 33647          __source.asm:65
Div16_NoAdd2        = $8380 = 33664          __source.asm:79
FirstCodePage       = $0020 =    32          kernel.asm:12
FreeMemory          = $8773 = 34675          data.asm:52
GFXInitialise48k    = $83EB = 33771          __source.asm:202
GFXInitialiseLayer2 = $8514 = 34068          __source.asm:466
GFXInitialiseLowRes = $85CB = 34251          __source.asm:627
GFXMode             = $849E = 33950          __source.asm:343
GFXPrintCharacter48k = $8417 = 33815          __source.asm:236
GFXPrintCharacterLayer2 = $8544 = 34116          __source.asm:502
GFXPrintCharacterLowRes = $85F5 = 34293          __source.asm:659
GFXWriteCharacter   = $84CF = 33999          __source.asm:387
GFXWriteHexWord     = $84E2 = 34018          __source.asm:410
GFXWriteHexWordA    = $84E4 = 34020          __source.asm:412 (unused)
Here                = $874F = 34639          data.asm:20 (unused)
HerePage            = $8751 = 34641          data.asm:22 (unused)
IOScanKeyboard      = $8680 = 34432          __source.asm:786
L2PClear            = $851D = 34077          __source.asm:473
L2PClearBank        = $852C = 34092          __source.asm:481
LowClearScreen      = $85DE = 34270          __source.asm:639
MULTMultiply16      = $839F = 33695          __source.asm:118
NextFreePage        = $8753 = 34643          data.asm:24 (unused)
SIFontBase          = $876B = 34667          data.asm:47
SIScreenDriver      = $876F = 34671          data.asm:49
SIScreenHeight      = $8763 = 34659          data.asm:43
SIScreenSize        = $8767 = 34663          data.asm:45
SIScreenWidth       = $875F = 34655          data.asm:41
StackTop            = $5FFE = 24574          kernel.asm:13
StartAddress        = $875B = 34651          data.asm:28
StartAddressPage    = $875D = 34653          data.asm:30
SystemInformation   = $874F = 34639          data.asm:18
__Core__Mult_Loop   = $83A6 = 33702          __source.asm:124
__Core__Mult_Shift  = $83AB = 33707          __source.asm:128
__GFXConfigure      = $84B4 = 33972          __source.asm:362
__GFXLayer2         = $84AC = 33964          __source.asm:355
__GFXLowRes         = $84B1 = 33969          __source.asm:359
__GFXWCExit         = $84DD = 34013          __source.asm:397
__GFXWHByte         = $84F6 = 34038          __source.asm:428
__GFXWHDigit        = $850C = 34060          __source.asm:442
__GFXWHNibble       = $8503 = 34051          __source.asm:436
__KernelHalt        = $8029 = 32809          kernel.asm:37
__L2Exit            = $85C4 = 34244          __source.asm:603
__L2Loop            = $85B5 = 34229          __source.asm:590
__L2Not1            = $8560 = 34144          __source.asm:524
__L2Not2            = $8566 = 34150          __source.asm:528
__L2Not3            = $856C = 34156          __source.asm:532
__L2NotCursor       = $8577 = 34167          __source.asm:541
__L2NotSet          = $85BB = 34235          __source.asm:595
__L2Outer           = $85AC = 34220          __source.asm:584
__LPExit            = $8669 = 34409          __source.asm:752
__LowLoop           = $8655 = 34389          __source.asm:736
__LowNotLower2      = $864A = 34378          __source.asm:728
__LowNotReverse     = $8617 = 34327          __source.asm:688
__LowNotSet         = $865B = 34395          __source.asm:741
__LowOuter          = $864C = 34380          __source.asm:730
__ZXWCCopy          = $8457 = 33879          __source.asm:298
__ZXWCExit          = $845E = 33886          __source.asm:305
___kr4              = $86B1 = 34481          __source.asm:817
__cs1               = $83FB = 33787          __source.asm:212
__cs2               = $8403 = 33795          __source.asm:217
__kr1               = $8695 = 34453          __source.asm:800
__kr2               = $86A0 = 34464          __source.asm:806
__kr3               = $86A2 = 34466          __source.asm:809
__kr_exit           = $86D1 = 34513          __source.asm:847
__kr_keypressed     = $86CB = 34507          __source.asm:841
__kr_no_shift_table = $86D5 = 34517          __source.asm:862
__kr_shift_table    = $86FD = 34557          __source.asm:868
__kr_symbol_shift_table = $86FD = 34557          __source.asm:869
_end                = $8773 = 34675          kernel.asm:2 (unused)
_size               = $0773 =  1907          kernel.asm:2 (unused)
link0               = $832B = 33579          __source.asm:15
link1               = $8344 = 33604          __source.asm:31
link10              = $874D = 34637          __source.asm:879
link2               = $8388 = 33672          __source.asm:102
link3               = $83B9 = 33721          __source.asm:151
link4               = $83CA = 33738          __source.asm:162
link5               = $83DB = 33755          __source.asm:173
link6               = $8463 = 33891          __source.asm:322
link7               = $8477 = 33911          __source.asm:327
link8               = $8489 = 33929          __source.asm:332
link9               = $8670 = 34416          __source.asm:771
linkHeader          = $832B = 33579          __source.asm:14


total time: 0.0042 sec.
no errors
